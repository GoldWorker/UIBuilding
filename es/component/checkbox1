import React, { Component, ChangeEvent, ReactElement, ComponentClass, FC, ReactNode, ReactChildren, useState } from 'react';

declare module 'react' {
    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {
        // extends React's HTMLAttributes
        trigger?: string;
    }
}

interface CheckboxProps {
    name?: string,
    label?: string,
    className?: string,
    checked?: boolean | undefined,
    defaultChecked?: boolean,
    disabled?: boolean,
    value: number | string,
    onChange?: (e: ChangeEvent<HTMLInputElement>) => void
}

export default function Checkbox(props: CheckboxProps): JSX.Element {
    const id = Math.random().toString(36).substring(2);

    const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {
        props.onChange && props.onChange(e);
    };

    return (
        <div className={['', props.className].join(' ')}>
            {
                props.checked === undefined ? <input
                    id={id}
                    trigger='core'
                    type="checkbox"
                    disabled={props.disabled}
                    name={props.name || ''}
                    value={props.value}
                    defaultChecked={props.defaultChecked || false}
                    onChange={handleChange}
                /> : <input
                    id={id}
                    trigger='core'
                    type="checkbox"
                    disabled={props.disabled}
                    name={props.name || ''}
                    value={props.value}
                    checked={props.checked}
                    onChange={handleChange}
                />
            }
            <span className="checkbox-hook ta-c">
                <span className="checkbox-hook-in fs12 op0">✓</span>
            </span>
            <label htmlFor={id} className="p-r z10 pl8">{id || ''}</label>
        </div>
    );
}

export function CheckboxFontIn(props: CheckboxProps): JSX.Element {
    const id = Math.random().toString(36).substring(2);

    const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {
        props.onChange && props.onChange(e);
    };

    return (
        <div className={['checkbox-box-fontstyle d-il mr16 mb8', props.className].join(' ')}>
            {
                props.checked === undefined ? <input
                    id={id}
                    trigger='core'
                    type="checkbox"
                    disabled={props.disabled}
                    className="d-n"
                    name={props.name}
                    value={props.value}
                    defaultChecked={props.defaultChecked || false}
                    onChange={handleChange}
                /> : <input
                    id={id}
                    trigger='core'
                    type="checkbox"
                    disabled={props.disabled}
                    className="d-n"
                    name={props.name}
                    value={props.value}
                    checked={props.checked}
                    onChange={handleChange}
                />
            }
            <label
                htmlFor={id}
                className="checkbox-fontstyle mb0">
                <span className="m0">{props.label || ''}</span>
            </label>
        </div>
    );
}

export function CheckboxBorder(props: CheckboxProps): JSX.Element {
    const id = Math.random().toString(36).substring(2);

    const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {
        props.onChange && props.onChange(e);
    };

    return (
        <div className="trigger-box-border d-il mr16 mb8">
            {
                props.checked === undefined ? <input
                    id={id}
                    trigger='core'
                    type="checkbox"
                    disabled={props.disabled}
                    className="d-n"
                    name={props.name}
                    value={props.value}
                    defaultChecked={props.defaultChecked || false}
                    onChange={handleChange}
                /> : <input
                    id={id}
                    trigger='core'
                    type="checkbox"
                    disabled={props.disabled}
                    className="d-n"
                    name={props.name}
                    value={props.value}
                    checked={props.checked}
                    onChange={handleChange}
                />
            }
            <label
                htmlFor={id}
                className="trigger-border mb0"
            >
                <span className="m0">{props.label || ''}</span>
            </label>
        </div>
    );
}

interface GroupProps {
    values: string[],
    defaultValue: string[],
    disabled: boolean,
    option: Array<{
        label: string,
        value: string | number,
        display: boolean,
        disabled: boolean,
    }>,
    className: string,
    children: ReactChildren,
    onChange: (values: Array<string | number>) => void
}
interface GroupState {
    option: any[],
    values: string[],
    selected: boolean[],
}

const GroupContainer = (component: any) => function Group(props: GroupProps): JSX.Element {
    const name = Math.random().toString(36).substring(2);

    // 非受控状态下使用
    const [selected, setSelected] = useState(props.defaultValue || []);

    const isInArray = (arr: string[], value: string | number): boolean | undefined => {
        if (Array.isArray(arr)) {
            return arr.indexOf(value as string) !== -1;
        }
        return undefined;
    };

    const onChange = (e: ChangeEvent<HTMLInputElement>): void => {
        const { value, checked } = e.target;

        let values: Array<string | number> = [];
        let res: Array<string | number> = [];

        // 可控
        if (props.values) {
            values = [...props.values];
        } else {
            // 非可控
            values = [...props.defaultValue];
        }

        if (checked) {
            res = [...values, value];
        } else {
            const index = values.indexOf(value);
            if (index !== -1) {
                values.splice(index, 1);
                res = [...values];
            }
        }
        props.onChange && props.onChange(res);
    };

    return (
        <div className={props.className || ''}>
            {
                props.option.map((item, index) => {
                    return React.createElement(component, {
                        key: index,
                        defaultChecked: isInArray(props.defaultValue || [], item.value),
                        checked: isInArray(props.values, item.value),
                        name: name,
                        label: item.label,
                        value: item.value,
                        disabled: item.disabled || props.disabled,
                        display: item.display,
                        onChange: (e: ChangeEvent<HTMLInputElement>) => onChange(e)
                    });
                })
            }
        </div>
    );
};

Checkbox.Group = GroupContainer(Checkbox);
Checkbox.GroupFontIn = GroupContainer(CheckboxFontIn);
Checkbox.GroupBorder = GroupContainer(CheckboxBorder);

// const GroupContainer1 = (component: ReactNode) => class Group extends Component<GroupProps, GroupState> {
//     private name: string

//     constructor(props: GroupProps) {
//         super(props);
//         this.name = Math.random().toString(36).substring(2);
//         this.state = {
//             option: this.props.option,
//             values: this.props.values,
//             selected: this.props.defaultValue ? [...this.props.defaultValue] : []
//         };
//     }
//     componentWillReceiveProps(nextProps) {
//         this.setState({
//             option: nextProps.option,
//             values: nextProps.values
//         });
//     }
//     onChange(e: ChangeEvent<HTMLInputElement>) {
//         const { value, checked } = e.target;
//         const { values, selected } = this.state;
//         let res: any = [];
//         if (values) {
//             //受控
//             if (checked) {
//                 res = [...values, value];
//             } else {
//                 const index = values.indexOf(value);
//                 if (index != -1) {
//                     values.splice(index, 1);
//                     res = [...values];
//                 }
//             }
//             this.setState({
//                 values: res
//             }, () => this.props.onChange(this.state.values));
//         } else {
//             //非受控，values为undefined
//             if (checked) {
//                 res = [...selected, value];
//             } else {
//                 const index = selected.indexOf(value);
//                 if (index != -1) {
//                     selected.splice(index, 1);
//                     res = [...selected];
//                 }
//             }
//             this.setState({
//                 selected: res
//             }, () => this.props.onChange(this.state.selected));
//         }
//     }
//     isInArray(arr, value): boolean | undefined {
//         if (Array.isArray(arr)) {
//             return arr.indexOf(value) != -1;
//         }
//         return undefined;
//     }
//     render() {
//         return (
//             <div className={this.props.className || ''}>
//                 {
//                     this.props.children ? null : this.state.option.map((item, index) => {
//                         return React.createElement(component, {
//                             key: index,
//                             defaultChecked: this.isInArray(this.props.defaultValue || [], item.value),
//                             checked: this.isInArray(this.state.values, item.value),
//                             name: this.name,
//                             label: item.label,
//                             value: item.value,
//                             disabled: item.disabled || this.props.disabled,
//                             display: item.display,
//                             onChange: (e: ChangeEvent<HTMLInputElement>) => this.onChange(e)
//                         });
//                     })
//                 }
//             </div>
//         );
//     }
// };

